{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Controller } from \"stimulus\";\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"connect\",\n    value: function connect() {\n      this.selectActiveClass = \"bg-blue-400\";\n      this.planParam = \"plan\";\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(event) {\n      var currentInterval = event.target.dataset.planSwitchTargetValue;\n      if (currentInterval == this.interval) return;\n      this.toggleAmounts();\n      this.toggleIntervals();\n      this.toggleSelects();\n      this.toggleButtons();\n      this.data.set(\"interval\", this.interval == \"month\" ? \"year\" : \"month\");\n    }\n  }, {\n    key: \"toggleAmounts\",\n    value: function toggleAmounts() {\n      var _this = this;\n\n      this.amountTargets.forEach(function (el, i) {\n        el.textContent = _this.interval == \"month\" ? el.dataset.planSwitchYearAmount : el.dataset.planSwitchMonthAmount;\n      });\n    }\n  }, {\n    key: \"toggleIntervals\",\n    value: function toggleIntervals() {\n      var _this2 = this;\n\n      this.intervalTargets.forEach(function (el, i) {\n        el.textContent = _this2.interval == \"month\" ? \"year\" : \"month\";\n      });\n    }\n  }, {\n    key: \"toggleSelects\",\n    value: function toggleSelects() {\n      var _this3 = this;\n\n      this.selectTargets.forEach(function (el, i) {\n        el.classList.remove(_this3.selectActiveClass);\n        event.target.classList.add(_this3.selectActiveClass);\n      });\n    }\n  }, {\n    key: \"toggleButtons\",\n    value: function toggleButtons() {\n      var _this4 = this;\n\n      this.buttonTargets.forEach(function (el, i) {\n        var href = new URL(el.href);\n        href.searchParams.set(_this4.planParam, _this4.interval == \"month\" ? el.dataset.planSwitchYearId : el.dataset.planSwitchMonthId);\n        el.href = href.toString();\n      });\n    }\n  }, {\n    key: \"interval\",\n    get: function get() {\n      return this.data.get(\"interval\");\n    }\n  }]);\n\n  return _default;\n}(Controller);\n\n_default.targets = [\"select\", \"amount\", \"interval\", \"button\"];\nexport { _default as default };","map":{"version":3,"sources":["/home/good-dev/Documents/Work/heytasker4/frontend/controllers/sjabloon/plan_switch_controller.js"],"names":["Controller","selectActiveClass","planParam","event","currentInterval","target","dataset","planSwitchTargetValue","interval","toggleAmounts","toggleIntervals","toggleSelects","toggleButtons","data","set","amountTargets","forEach","el","i","textContent","planSwitchYearAmount","planSwitchMonthAmount","intervalTargets","selectTargets","classList","remove","add","buttonTargets","href","URL","searchParams","planSwitchYearId","planSwitchMonthId","toString","get","targets"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,UAA3B;;;;;;;;;;;;;;;8BAKY;AACR,WAAKC,iBAAL,GAAyB,aAAzB;AACA,WAAKC,SAAL,GAAyB,MAAzB;AACD;;;2BAEMC,K,EAAO;AACZ,UAAIC,eAAe,GAAGD,KAAK,CAACE,MAAN,CAAaC,OAAb,CAAqBC,qBAA3C;AACA,UAAIH,eAAe,IAAI,KAAKI,QAA5B,EAAsC;AAEtC,WAAKC,aAAL;AACA,WAAKC,eAAL;AACA,WAAKC,aAAL;AACA,WAAKC,aAAL;AAEA,WAAKC,IAAL,CAAUC,GAAV,CAAc,UAAd,EAA2B,KAAKN,QAAL,IAAiB,OAAjB,GAA2B,MAA3B,GAAoC,OAA/D;AACD;;;oCAEe;AAAA;;AACd,WAAKO,aAAL,CAAmBC,OAAnB,CAA2B,UAACC,EAAD,EAAKC,CAAL,EAAW;AACpCD,QAAAA,EAAE,CAACE,WAAH,GAAkB,KAAI,CAACX,QAAL,IAAiB,OAAjB,GAA2BS,EAAE,CAACX,OAAH,CAAWc,oBAAtC,GAA6DH,EAAE,CAACX,OAAH,CAAWe,qBAA1F;AACD,OAFD;AAGD;;;sCAEiB;AAAA;;AAChB,WAAKC,eAAL,CAAqBN,OAArB,CAA6B,UAACC,EAAD,EAAKC,CAAL,EAAW;AACtCD,QAAAA,EAAE,CAACE,WAAH,GAAkB,MAAI,CAACX,QAAL,IAAiB,OAAjB,GAA2B,MAA3B,GAAoC,OAAtD;AACD,OAFD;AAGD;;;oCAEe;AAAA;;AACd,WAAKe,aAAL,CAAmBP,OAAnB,CAA2B,UAACC,EAAD,EAAKC,CAAL,EAAW;AACpCD,QAAAA,EAAE,CAACO,SAAH,CAAaC,MAAb,CAAoB,MAAI,CAACxB,iBAAzB;AACAE,QAAAA,KAAK,CAACE,MAAN,CAAamB,SAAb,CAAuBE,GAAvB,CAA2B,MAAI,CAACzB,iBAAhC;AACD,OAHD;AAID;;;oCAEe;AAAA;;AACd,WAAK0B,aAAL,CAAmBX,OAAnB,CAA2B,UAACC,EAAD,EAAKC,CAAL,EAAW;AACpC,YAAIU,IAAI,GAAG,IAAIC,GAAJ,CAAQZ,EAAE,CAACW,IAAX,CAAX;AAEAA,QAAAA,IAAI,CAACE,YAAL,CAAkBhB,GAAlB,CAAsB,MAAI,CAACZ,SAA3B,EAAuC,MAAI,CAACM,QAAL,IAAiB,OAAjB,GAA2BS,EAAE,CAACX,OAAH,CAAWyB,gBAAtC,GAAyDd,EAAE,CAACX,OAAH,CAAW0B,iBAA3G;AACAf,QAAAA,EAAE,CAACW,IAAH,GAAUA,IAAI,CAACK,QAAL,EAAV;AACD,OALD;AAMD;;;wBAEc;AACb,aAAO,KAAKpB,IAAL,CAAUqB,GAAV,CAAc,UAAd,CAAP;AACD;;;;EAlD0BlC,U;;SACpBmC,O,GAAU,CAAE,QAAF,EAAY,QAAZ,EAAsB,UAAtB,EAAkC,QAAlC,C","sourcesContent":["import { Controller } from \"stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"select\", \"amount\", \"interval\", \"button\" ]\n\n  connect() {\n    this.selectActiveClass = \"bg-blue-400\"\n    this.planParam         = \"plan\"\n  }\n\n  toggle(event) {\n    var currentInterval = event.target.dataset.planSwitchTargetValue\n    if (currentInterval == this.interval) return\n\n    this.toggleAmounts()\n    this.toggleIntervals()\n    this.toggleSelects()\n    this.toggleButtons()\n\n    this.data.set(\"interval\", (this.interval == \"month\" ? \"year\" : \"month\"))\n  }\n\n  toggleAmounts() {\n    this.amountTargets.forEach((el, i) => {\n      el.textContent = (this.interval == \"month\" ? el.dataset.planSwitchYearAmount : el.dataset.planSwitchMonthAmount)\n    })\n  }\n\n  toggleIntervals() {\n    this.intervalTargets.forEach((el, i) => {\n      el.textContent = (this.interval == \"month\" ? \"year\" : \"month\")\n    })\n  }\n\n  toggleSelects() {\n    this.selectTargets.forEach((el, i) => {\n      el.classList.remove(this.selectActiveClass)\n      event.target.classList.add(this.selectActiveClass)\n    })\n  }\n\n  toggleButtons() {\n    this.buttonTargets.forEach((el, i) => {\n      var href = new URL(el.href);\n\n      href.searchParams.set(this.planParam, (this.interval == \"month\" ? el.dataset.planSwitchYearId : el.dataset.planSwitchMonthId));\n      el.href = href.toString()\n    })\n  }\n\n  get interval() {\n    return this.data.get(\"interval\")\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}