{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Controller } from \"stimulus\";\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"submitForm\",\n    value: function submitForm(event) {\n      var isValid = this.validateForm(this.formTarget);\n\n      if (!isValid) {\n        event.preventDefault();\n      }\n    }\n  }, {\n    key: \"validateForm\",\n    value: function validateForm() {\n      var isValid = true;\n      var requiredFieldSelectors = \"textarea:required, input:required\";\n      var requiredFields = this.formTarget.querySelectorAll(requiredFieldSelectors);\n      requiredFields.forEach(function (field) {\n        if (!field.disabled && !field.value.trim()) {\n          field.classList.add(\"input__invalid\");\n          field.focus();\n          isValid = false;\n          return false;\n        }\n      });\n\n      if (!isValid) {\n        return false;\n      }\n\n      var invalidFields = this.formTarget.querySelectorAll(\"input:invalid\");\n      invalidFields.forEach(function (field) {\n        if (!field.disabled) {\n          field.classList.add(\"input__invalid\");\n          field.focus();\n          isValid = false;\n        }\n      });\n      return isValid;\n    }\n  }]);\n\n  return _default;\n}(Controller);\n\n_default.targets = [\"form\"];\nexport { _default as default };","map":{"version":3,"sources":["/home/good-dev/Documents/Work/heytasker4/frontend/controllers/sjabloon/form_validation_controller.js"],"names":["Controller","event","isValid","validateForm","formTarget","preventDefault","requiredFieldSelectors","requiredFields","querySelectorAll","forEach","field","disabled","value","trim","classList","add","focus","invalidFields","targets"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,UAA3B;;;;;;;;;;;;;;;+BAKaC,K,EAAO;AAChB,UAAIC,OAAO,GAAG,KAAKC,YAAL,CAAkB,KAAKC,UAAvB,CAAd;;AAEA,UAAI,CAACF,OAAL,EAAc;AACZD,QAAAA,KAAK,CAACI,cAAN;AACD;AACF;;;mCAEc;AACb,UAAIH,OAAO,GAAG,IAAd;AACA,UAAII,sBAAsB,GAAG,mCAA7B;AACA,UAAIC,cAAc,GAAW,KAAKH,UAAL,CAAgBI,gBAAhB,CAAiCF,sBAAjC,CAA7B;AAEAC,MAAAA,cAAc,CAACE,OAAf,CAAuB,UAACC,KAAD,EAAW;AAChC,YAAI,CAACA,KAAK,CAACC,QAAP,IAAmB,CAACD,KAAK,CAACE,KAAN,CAAYC,IAAZ,EAAxB,EAA4C;AAC1CH,UAAAA,KAAK,CAACI,SAAN,CAAgBC,GAAhB,CAAoB,gBAApB;AACAL,UAAAA,KAAK,CAACM,KAAN;AAEAd,UAAAA,OAAO,GAAG,KAAV;AAEA,iBAAO,KAAP;AACD;AACF,OATD;;AAWA,UAAI,CAACA,OAAL,EAAc;AACZ,eAAO,KAAP;AACD;;AAED,UAAIe,aAAa,GAAG,KAAKb,UAAL,CAAgBI,gBAAhB,CAAiC,eAAjC,CAApB;AAEAS,MAAAA,aAAa,CAACR,OAAd,CAAsB,UAACC,KAAD,EAAW;AAC/B,YAAI,CAACA,KAAK,CAACC,QAAX,EAAqB;AACnBD,UAAAA,KAAK,CAACI,SAAN,CAAgBC,GAAhB,CAAoB,gBAApB;AACAL,UAAAA,KAAK,CAACM,KAAN;AAEAd,UAAAA,OAAO,GAAG,KAAV;AACD;AACF,OAPD;AASA,aAAOA,OAAP;AACD;;;;EA3C0BF,U;;SACpBkB,O,GAAU,CAAC,MAAD,C","sourcesContent":["import { Controller } from \"stimulus\"\n\nexport default class extends Controller {\n  static targets = [\"form\"]\n\n  submitForm(event) {\n    let isValid = this.validateForm(this.formTarget)\n\n    if (!isValid) {\n      event.preventDefault()\n    }\n  }\n\n  validateForm() {\n    let isValid = true\n    let requiredFieldSelectors = \"textarea:required, input:required\"\n    let requiredFields         = this.formTarget.querySelectorAll(requiredFieldSelectors)\n\n    requiredFields.forEach((field) => {\n      if (!field.disabled && !field.value.trim()) {\n        field.classList.add(\"input__invalid\")\n        field.focus()\n\n        isValid = false\n\n        return false\n      }\n    })\n\n    if (!isValid) {\n      return false\n    }\n\n    let invalidFields = this.formTarget.querySelectorAll(\"input:invalid\")\n\n    invalidFields.forEach((field) => {\n      if (!field.disabled) {\n        field.classList.add(\"input__invalid\")\n        field.focus()\n\n        isValid = false\n      }\n    })\n\n    return isValid\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}