{"ast":null,"code":"function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { return function () { var Super = _getPrototypeOf(Derived), result; if (_isNativeReflectConstruct()) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (typeof call === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Controller } from \"stimulus\";\n\nvar _default = /*#__PURE__*/function (_Controller) {\n  _inherits(_default, _Controller);\n\n  var _super = _createSuper(_default);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(_default, [{\n    key: \"connect\",\n    value: function connect() {\n      this.activeClass = this.data.get(\"activeClass\") || \"active\";\n      this.toggleIconClass = this.data.get(\"toggleIconClass\") || \"toggled\";\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle(event) {\n      event.preventDefault();\n      this.index = this.pointerTargets.indexOf(event.currentTarget);\n    }\n  }, {\n    key: \"showContent\",\n    value: function showContent() {\n      var _this = this;\n\n      this.pointerTargets.forEach(function (pointer, index) {\n        var content = _this.contentTargets[index];\n        var icon = _this.iconTargets[index];\n        content.classList.toggle(_this.activeClass, index == _this.index);\n\n        if (index === _this.index) {\n          icon.classList.add(_this.toggleIconClass);\n        } else {\n          icon.classList.remove(_this.toggleIconClass);\n        }\n      });\n    }\n  }, {\n    key: \"index\",\n    get: function get() {\n      return parseInt(this.data.get(\"index\") || 0);\n    },\n    set: function set(value) {\n      this.data.set(\"index\", value);\n      this.showContent();\n    }\n  }]);\n\n  return _default;\n}(Controller);\n\n_default.targets = [\"pointer\", \"content\", \"icon\"];\nexport { _default as default };","map":{"version":3,"sources":["/home/good-dev/Documents/Work/heytasker4/frontend/controllers/sjabloon/accordion_controller.js"],"names":["Controller","activeClass","data","get","toggleIconClass","event","preventDefault","index","pointerTargets","indexOf","currentTarget","forEach","pointer","content","contentTargets","icon","iconTargets","classList","toggle","add","remove","parseInt","value","set","showContent","targets"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,SAASA,UAAT,QAA2B,UAA3B;;;;;;;;;;;;;;;8BAKY;AACR,WAAKC,WAAL,GAAwB,KAAKC,IAAL,CAAUC,GAAV,CAAc,aAAd,KAAqC,QAA7D;AACA,WAAKC,eAAL,GAAwB,KAAKF,IAAL,CAAUC,GAAV,CAAc,iBAAd,KAAqC,SAA7D;AACD;;;2BAEME,K,EAAO;AACZA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKC,KAAL,GAAa,KAAKC,cAAL,CAAoBC,OAApB,CAA4BJ,KAAK,CAACK,aAAlC,CAAb;AACD;;;kCAEa;AAAA;;AACZ,WAAKF,cAAL,CAAoBG,OAApB,CAA4B,UAACC,OAAD,EAAUL,KAAV,EAAoB;AAC9C,YAAMM,OAAO,GAAG,KAAI,CAACC,cAAL,CAAoBP,KAApB,CAAhB;AACA,YAAMQ,IAAI,GAAM,KAAI,CAACC,WAAL,CAAiBT,KAAjB,CAAhB;AACAM,QAAAA,OAAO,CAACI,SAAR,CAAkBC,MAAlB,CAAyB,KAAI,CAACjB,WAA9B,EAA2CM,KAAK,IAAI,KAAI,CAACA,KAAzD;;AAEA,YAAIA,KAAK,KAAK,KAAI,CAACA,KAAnB,EAA0B;AACxBQ,UAAAA,IAAI,CAACE,SAAL,CAAeE,GAAf,CAAmB,KAAI,CAACf,eAAxB;AACD,SAFD,MAEO;AACLW,UAAAA,IAAI,CAACE,SAAL,CAAeG,MAAf,CAAsB,KAAI,CAAChB,eAA3B;AACD;AACF,OAVD;AAWD;;;wBAEW;AACV,aAAOiB,QAAQ,CAAC,KAAKnB,IAAL,CAAUC,GAAV,CAAc,OAAd,KAA0B,CAA3B,CAAf;AACD,K;sBAESmB,K,EAAO;AACf,WAAKpB,IAAL,CAAUqB,GAAV,CAAc,OAAd,EAAuBD,KAAvB;AACA,WAAKE,WAAL;AACD;;;;EAlC0BxB,U;;SACpByB,O,GAAU,CAAE,SAAF,EAAa,SAAb,EAAwB,MAAxB,C","sourcesContent":["import { Controller } from \"stimulus\"\n\nexport default class extends Controller {\n  static targets = [ \"pointer\", \"content\", \"icon\" ]\n\n  connect() {\n    this.activeClass      = this.data.get(\"activeClass\")      || \"active\"\n    this.toggleIconClass  = this.data.get(\"toggleIconClass\")  || \"toggled\"\n  }\n\n  toggle(event) {\n    event.preventDefault()\n    this.index = this.pointerTargets.indexOf(event.currentTarget)\n  }\n\n  showContent() {\n    this.pointerTargets.forEach((pointer, index) => {\n      const content = this.contentTargets[index]\n      const icon    = this.iconTargets[index]\n      content.classList.toggle(this.activeClass, index == this.index)\n\n      if (index === this.index) {\n        icon.classList.add(this.toggleIconClass)\n      } else {\n        icon.classList.remove(this.toggleIconClass)\n      }\n    })\n  }\n\n  get index() {\n    return parseInt(this.data.get(\"index\") || 0)\n  }\n\n  set index(value) {\n    this.data.set(\"index\", value)\n    this.showContent()\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}